buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name = 'minecrell'
            url = 'http://repo.minecrell.net/snapshots'
        }
    }

    dependencies {
        classpath 'net.minecrell:QuartzGradle:0.1-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
}

apply plugin: 'net.minecrell.quartz'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

mainClassName = 'net.minecrell.quartz.Quartz'

ext {
    mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.srg")
    mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.quartz.refmap.json")
}

minecraft {
    version = '1.8'
    mappings = 'snapshot_20150207'
    tweaker = 'net.minecrell.quartz.QuartzTweaker'
}

dependencies {
    compile 'org.spongepowered:mixin:0.1-SNAPSHOT'
    runtime 'org.ow2.asm:asm-all:5.0.3'
}

shadowJar {
    classifier = ''
    exclude 'GradleStart**'
    exclude 'net/minecraftforge/**'

    dependencies {
        include dependency('org.spongepowered:mixin')
        include dependency('net.sf.jopt-simple:jopt-simple')
        include dependency('org.ow2.asm:asm-all')
    }
}
build.dependsOn(shadowJar)

jar {
    from project.mixinRefMap

    manifest {
        attributes(
                'Class-Path': 'minecraft_server.1.8.jar launchwrapper-1.11.jar'
        )
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}"
    ]

    options.deprecation = true
    options.encoding = 'utf8'
}

// Copy the current srgs to the build dir so the user doesn't have to go hunting for them
task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin('net.minecrell.quartz').delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs

reobf {
    addExtraSrgFile project.mixinSrg

    reobf(shadowJar) { spec ->
        spec.classpath = configurations.compile
    }
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += "-AreobfSrgFile=${tasks.reobf.srg}"
}
